{"version":3,"sources":["components/Banner.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Banner","className","role","aria-label","id","Component","Content","width","height","viewBox","preserveAspectRatio","fill","d","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAIqBA,G,0OAGjB,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eAAf,uBACA,yBAAKA,UAAU,gBAAf,sBAEF,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,SAAf,SACS,IACP,0BAAMA,UAAU,aAAaC,KAAK,MAAMC,aAAW,QAAnD,6BAHJ,qFAOgE,6BAPhE,2GAWA,yBAAKC,GAAG,mB,GApBoBC,cCDfC,G,uLAEjB,OACE,yBAAKL,UAAU,qBACb,yBACEA,UAAU,WACVM,MAAM,OACNC,OAAO,MACPC,QAAQ,eACRC,oBAAoB,OACpBC,KAAK,QAEL,0BACEC,EAAE,icACFD,KAAK,WAGT,yBAAKV,UAAU,iB,GAjBcI,cCgBtBQ,MAbf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCCca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a8ce792b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style/Banner.css\";\nimport anime from \"animejs\";\n\nexport default class Banner extends Component {\n  componentDidMount() {}\n  render() {\n    return (\n      <div className=\"banner-container\">\n        <div className=\"navbar-container\">\n          <div className=\"navbar-left\">üëª !false</div>\n          <div className=\"navbar-right\">work üíº</div>\n        </div>\n        <div className=\"intro-content\">\n          <div className=\"title\">\n            Hello!{\" \"}\n            <span className=\"emoji-wave\" role=\"img\" aria-label=\"wave\">\n              üëãüèº\n            </span>\n          </div>\n          My name is Tru. I'm a developer ü§ñ / designer üé® based in SF. <br />\n          Currently @ r2c üíª and previously @ Double Fine Productions üëæ & Uber\n          üöò.\n        </div>\n        <div id=\"banner-bg\"></div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./style/Content.css\";\n\nexport default class Content extends Component {\n  render() {\n    return (\n      <div className=\"content-container\">\n        <svg\n          className=\"white-bg\"\n          width=\"100%\"\n          height=\"492\"\n          viewBox=\"0 0 1440 492\"\n          preserveAspectRatio=\"none\"\n          fill=\"none\"\n        >\n          <path\n            d=\"M17.1 42.7L0 0V492H1440V64L1423 101.3C1406 139 1371.4 213 1337 202.7C1303 192 1268.6 96 1234 80C1200 64 1165.7 128 1131 176C1097 224 1062.9 256 1029 250.7C994 245 960 203 926 165.3C891 128 857.1 96 823 90.7C789 85 754.3 107 720 128L718.548 128.897C685.015 149.617 650.91 170.691 617 149.3C583 128 548.6 64 514 74.7C480 85 445.7 171 411 192C377 213 342.9 171 309 138.7C274 107 240 85 206 106.7C171 128 137.1 192 103 181.3C69 171 34.3 85 17.1 42.7Z\"\n            fill=\"white\"\n          />\n        </svg>\n        <div className=\"content\"></div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Banner from \"./components/Banner\";\nimport { WaveFooter } from \"./svgs/bg\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n\n      <Content />\n      {/* <div className=\"footer\">\n        <WaveFooter />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}