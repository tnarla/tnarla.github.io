{"version":3,"sources":["svgs/bg.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["WaveBG","xmlns","viewBox","fill","fill-opacity","d","WaveFooter","Banner","className","role","aria-label","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSACaA,G,MAAS,kBACpB,yBAAKC,MAAM,6BAA6BC,QAAQ,gBAC9C,0BACEC,KAAK,UACLC,eAAa,IACbC,EAAE,stBAKKC,EAAa,kBACxB,yBAAKL,MAAM,6BAA6BC,QAAQ,gBAC9C,0BACEC,KAAK,UACLC,eAAa,IACbC,EAAE,6cCZaE,E,iLAEjB,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,gBAAf,SAEF,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,SAAf,SACS,IACP,0BAAMA,UAAU,aAAaC,KAAK,MAAMC,aAAW,QAAnD,6BAHJ,2DAO0D,6BAP1D,oEAUA,yBAAKF,UAAU,aACb,kBAAC,EAAD,Y,GAnB0BG,aCYrBC,MAXf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,UACb,kBAAC,EAAD,SCEYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0d37964.chunk.js","sourcesContent":["import React from \"react\";\nexport const WaveBG = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n    <path\n      fill=\"#273036\"\n      fill-opacity=\"1\"\n      d=\"M0,32L17.1,74.7C34.3,117,69,203,103,213.3C137.1,224,171,160,206,138.7C240,117,274,139,309,170.7C342.9,203,377,245,411,224C445.7,203,480,117,514,106.7C548.6,96,583,160,617,181.3C651.4,203,686,181,720,160C754.3,139,789,117,823,122.7C857.1,128,891,160,926,197.3C960,235,994,277,1029,282.7C1062.9,288,1097,256,1131,208C1165.7,160,1200,96,1234,112C1268.6,128,1303,224,1337,234.7C1371.4,245,1406,171,1423,133.3L1440,96L1440,0L1422.9,0C1405.7,0,1371,0,1337,0C1302.9,0,1269,0,1234,0C1200,0,1166,0,1131,0C1097.1,0,1063,0,1029,0C994.3,0,960,0,926,0C891.4,0,857,0,823,0C788.6,0,754,0,720,0C685.7,0,651,0,617,0C582.9,0,549,0,514,0C480,0,446,0,411,0C377.1,0,343,0,309,0C274.3,0,240,0,206,0C171.4,0,137,0,103,0C68.6,0,34,0,17,0L0,0Z\"\n    ></path>\n  </svg>\n);\n\nexport const WaveFooter = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n    <path\n      fill=\"#273036\"\n      fill-opacity=\"1\"\n      d=\"M0,320L30,272C60,224,120,128,180,117.3C240,107,300,181,360,213.3C420,245,480,235,540,197.3C600,160,660,96,720,96C780,96,840,160,900,181.3C960,203,1020,181,1080,165.3C1140,149,1200,139,1260,154.7C1320,171,1380,213,1410,234.7L1440,256L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z\"\n    ></path>\n  </svg>\n);\n","import React, { Component } from \"react\";\nimport \"./style/Banner.css\";\nimport { WaveBG } from \"../svgs/bg\";\n\nexport default class Banner extends Component {\n  render() {\n    return (\n      <div className=\"banner-container\">\n        <div className=\"navbar-container\">\n          <div className=\"navbar-left\">!false</div>\n          <div className=\"navbar-right\">work</div>\n        </div>\n        <div className=\"intro-content\">\n          <div className=\"title\">\n            Hello!{\" \"}\n            <span className=\"emoji-wave\" role=\"img\" aria-label=\"wave\">\n              üëãüèº\n            </span>\n          </div>\n          My name is Tru. I'm a developer / designer based in SF. <br />\n          Currently @ r2c and previously @ Double Fine Productions & Uber.\n        </div>\n        <div className=\"banner-bg\">\n          <WaveBG />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Banner from \"./components/Banner\";\nimport { WaveFooter } from \"./svgs/bg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <div className=\"footer\">\n        <WaveFooter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}